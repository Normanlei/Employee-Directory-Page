{"version":3,"sources":["components/Wrapper/index.js","utils/API.js","components/Modal/index.js","components/Navbar/index.js","components/SearchForm/index.js","components/Container/index.js","components/Table/index.js","components/Alert/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","Promise","resolve","reject","fetch","then","response","json","data","catch","err","newEmployee","method","headers","body","JSON","stringify","AddMemberModal","useState","name","setName","gender","setGender","email","setEmail","phone","setPhone","department","setDepartment","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","htmlFor","type","placeholder","onChange","event","target","value","console","log","pattern","action","encType","onClick","preventDefault","API","refresh","onHide","Footer","Button","Navbar","modalShow","setModalShow","reFresh","variant","show","SearchForm","handleFormSubmit","handleInputChange","handleOptionChange","renderAllEmployee","list","Container","fluid","Table","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","column","scope","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","Alert","role","style","width","margin","marginTop","children","App","employeesData","React","useMemo","accessor","employees","setEmployees","search","category","error","setData","useEffect","newEmployees","filter","employee","toLowerCase","includes","opacity","marginBottom","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab1f16e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","\nexport default {\n  getAllEmployees: function () {\n    return new Promise((resolve, reject) => {\n      fetch(\"/api/Employees\")\n        .then(response => response.json())\n        .then(data => {\n          resolve(data);\n        })\n        .catch((err) => reject(err));\n    });\n  },\n  addEmployee: function (newEmployee) {\n    return new Promise((resolve, reject) => {\n      fetch(\"/api/add/Employees\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newEmployee)\n      })\n        .then(response => response.json())\n        .then(data => {\n          resolve(data);\n        })\n        .catch((err) => reject(err));\n    });\n  },\n  addImage: function (file) {\n    console.log(file);\n    return new Promise((resolve, reject) => {\n      fetch(\"/upload\", {\n        method: \"POST\",\n        body: new FormData(file)\n      })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n        })\n        .catch((err) => console.log(err));\n    });\n  }\n};\n","import React, { useState } from \"react\";\nimport { Button, Modal } from 'react-bootstrap';\nimport API from \"../../utils/API\";\n\nfunction AddMemberModal(props) {\n  const [name, setName] = useState();\n  const [gender, setGender] = useState(\"male\");\n  const [email, setEmail] = useState();\n  const [phone, setPhone] = useState();\n  const [department, setDepartment] = useState(\"fullstack\");\n  const [imagePath, setImagePath] = useState(\"blank-template.jpg\");\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleGenderChange = event => {\n    console.log(event.target.value);\n    setGender(event.target.value);\n  };\n\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n  };\n\n  const handlePhoneChange = event => {\n    setPhone(event.target.value);\n  };\n\n  const handleDepartmentChange = event => {\n    setDepartment(event.target.value);\n  };\n\n  const handleImageUpload = event => {\n    const files = event.target.files;\n    // const formData = new FormData()\n    // formData.append('myFile', files[0]);\n    API.addImage(files[0]);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let newEmployee = {\n      name: name,\n      gender: gender,\n      email: email,\n      phone: phone,\n      department: department\n    };\n    console.log(newEmployee);\n    API.addEmployee(newEmployee)\n      .then(() => {\n        props.refresh();\n        props.onHide();\n      })\n  };\n\n\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Adding Employee\n          </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <form className=\"search form-group\">\n          <div className=\"form-group\">\n            <label htmlFor=\"language\">Name:</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"First Name + Last Name\"\n              onChange={handleNameChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"gender\">Gender:</label>\n            <select className=\"gender form-control\" onChange={handleGenderChange}>\n              <option value=\"Male\">Male</option>\n              <option value=\"Female\">Female</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email:</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"example@example.com\"\n              onChange={handleEmailChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"phone\">Phone:</label>\n            <input\n              type=\"tel\"\n              className=\"form-control\"\n              pattern=\"([0-9]{3})[0-9]{3}-[0-9]{4}\"\n              placeholder=\"Format:(123)456-7890\"\n              onChange={handlePhoneChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"department\">Department:</label>\n            <select className=\"department form-control\" onChange={handleDepartmentChange}>\n              <option value=\"Full-Stack\">Full-Stack</option>\n              <option value=\"Front-end\">Front-end</option>\n              <option value=\"Back-end\">Back-end</option>\n            </select>\n          </div>\n          <form action=\"/upload\" method=\"POST\" encType=\"multipart/form-data\">\n            <div className=\"form-group\">\n              <label htmlFor=\"pic\">Upload Profile Image:</label>\n              <input type=\"file\" className=\"form-control-file\" name=\"myImage\"></input>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n          </form>\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>Submit</button>\n        </form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default AddMemberModal;","import React from \"react\";\nimport \"./style.css\";\nimport AddMemberModal from \"../Modal\";\nimport { Button } from 'react-bootstrap';\n\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar({ modalShow, setModalShow, reFresh }) {\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <span className=\"navbar-brand\">\n        Sqwash\n      </span>\n      <div className=\"ml-auto\">\n        <Button variant=\"primary\" onClick={() => setModalShow(true)}>\n          Add Employee\n        </Button>\n      </div>\n      <AddMemberModal\n        reFresh = {reFresh}\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm({ handleFormSubmit, handleInputChange, handleOptionChange, renderAllEmployee}) {\n\n\n  return (\n    <form className=\"search form-inline justify-content-center\">\n      <div className=\"form-group\">\n        <label htmlFor=\"language\">Search:</label>\n        <input\n          name=\"term\"\n          list=\"term\"\n          type=\"text\"\n          className=\"form-control mx-2\"\n          placeholder=\"search term\"\n          onChange = {handleInputChange}\n        />\n      </div>\n      <div className=\"form-group mx-3\">\n        <label htmlFor=\"category\">Search Category:</label>\n        <select className=\"category form-control mx-2\" onChange ={handleOptionChange}>\n          <option value=\"name\">Name</option>\n          <option value=\"email\">Email</option>\n          <option value=\"phone\">Phone</option>\n          <option value=\"department\">Department</option>\n        </select>\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary mx-3\" onClick={handleFormSubmit}>Search</button>\n      <button type=\"clear\" className=\"btn btn-danger mx-3\" onClick={renderAllEmployee}>clear</button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props}/>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport { useTable, useSortBy } from \"react-table\";\nimport \"./style.css\";\n\nfunction Table({ columns, data }) {\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n    } = useTable(\n      {\n        columns,\n        data,\n      },\n      useSortBy\n    )\n  \n  \n    return (\n      <>\n        <table className=\"table table-striped table-borderless table-hover\" {...getTableProps()}>\n          <thead>\n            {headerGroups.map(headerGroup => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                  // Add the sorting props to control sorting. For this example\n                  // we can add them into the header props\n                  <th scope=\"col\" {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map(\n              (row, i) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      )\n                    })}\n                  </tr>\n                )}\n            )}\n          </tbody>\n        </table>\n        <br />\n      </>\n    )\n  }\n\n  export default Table;","import React from \"react\";\n\nfunction Alert(props) {\n  return (\n    <div\n      role=\"alert\"\n      className={`alert alert-${props.type} fade in`}\n      style={{ width: \"80%\", margin: \"0 auto\", marginTop: 18, ...props.style }}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport default Alert;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport SearchForm from \"./components/SearchForm\";\nimport Container from \"./components/Container\";\nimport Table from \"./components/Table\";\nimport Alert from \"./components/Alert\";\nimport API from \"./utils/API\";\n\nfunction App() {\n  const [modalShow, setModalShow] = useState(false);\n  let employeesData = [];\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n\n      },\n\n      {\n        Header: 'Gender',\n        accessor: 'gender',\n      },\n      {\n        Header: 'Email',\n        accessor: 'email',\n      },\n      {\n        Header: 'Phone',\n        accessor: 'phone',\n      },\n      {\n        Header: 'Department',\n        accessor: 'department',\n      },\n    ],\n    []\n  );\n  const [employees, setEmployees] = useState(employeesData);\n\n  const [data, setData] = useState({\n    search: \"\",\n    category: \"name\",\n    error: \"\"\n  });\n\n\n  useEffect(() => {   ///would be api call here\n    API.getAllEmployees()\n    .then(data => {\n      // eslint-disable-next-line\n      employeesData = data;\n      setEmployees(employeesData);\n    });\n  }, []);\n\n  const renderAllEmployee = ()=>{\n    API.getAllEmployees()\n    .then(data => {\n      employeesData = data;\n      setEmployees(employeesData);\n    })\n  };\n\n  const handleInputChange = event => {\n    setData({ \n      search: event.target.value,\n      category: data.category,\n      error: data.error\n    });\n  };\n\n  const handleOptionChange = event => {\n    setData({ \n      search: data.search,\n      category: event.target.value,\n      error: data.error\n    });\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    if (!data.search) {\n      return;\n    }\n    const newEmployees = employees.filter(employee =>\n      employee[data.category].toLowerCase().includes(data.search.toLowerCase())\n    );\n    setEmployees(newEmployees);\n  };\n\n  return (\n    <Wrapper>\n      <Navbar modalShow={modalShow} setModalShow={setModalShow} refresh = {renderAllEmployee}></Navbar>\n      <Container>\n        <SearchForm\n          handleFormSubmit={handleFormSubmit}\n          handleInputChange={handleInputChange}\n          handleOptionChange={handleOptionChange}\n          renderAllEmployee = {renderAllEmployee}\n        ></SearchForm>\n        <Alert type=\"danger\" style={{ opacity: data.error ? 1 : 0, marginBottom: 10 }}>\n          {data.error}\n        </Alert>\n        <Table columns={columns} data={employees}></Table>\n      </Container>\n    </Wrapper>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}